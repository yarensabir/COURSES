*******************************************************
                *  GİT İLK PROJE  *
*******************************************************
*git config --global user.email "your-email@email.com"
*git config --global user.name "Your Name"

--repository oluşturma:
*ilgili dizini oluşturup içine git
*git init
bu repo şu şekilde oluşturulabilirdi: 
*mkdir embedded/git
*cd embedded
*git init

-- tree .  komutu ile dosya yapısı görüntülenebilir

--durum kontrolü
*git status

--stage alanına dosyaların eklenmesi için:
*git add dosyaadi.txt
*git add klasoradi/
bütün değişiklikleri atmak için --> git add .

--işlemleri onaylama:
*git commit -m "güncelleme yorumu"


*******************************************************
                  *  GİT COMMIT  *
*******************************************************
--commit analizi
*git log --> kommit durumunu görüntüleme
*git cat-file -p COMMIT_ICIN_URETILMIS_HASH --> önceki commentin detaylarına bakma
*tree COMMIT_ICIN_URETILMIS_TREE_HASH

yeni commit yaptıktan sonra log ile kontrol ettiğinde her commitin yanında kod var.
*git cat-file -p  kod ile commitin içeriğine bakabilirsin

Count-objects ile projenin altında "objects" dizininde toplamda kaç adet objenin olduğunu kontrol edebilirsiniz.
*git count-objects


*******************************************************
                  *  BRANCH  *
*******************************************************
--branchları görüntüleme:
*git branch
--test adında yeni branch oluşturma:
*git branch test
--branch değişikliği yapma git switch ve git checkout ile yapılır:
*git switch test


*******************************************************
                  *  MERGE  *
*******************************************************
--repositorynin güncel ağaç yapısı:
*git log --oneline --graph --all --decorate
--iki branchı birleştirme (fast forward):
*git merge test

--Bu yöntemde ise branch'lerin birleştirilmesi esnasında yeni bir commit oluşturulmaz. Olan commitlerdeki ilk birleşim noktasına kadar geri gidilip yeni commitler sanki yeni özellik eski kod base'iyle aynı daldan geliyormuş gibi tek tek eklenir. Bu işlem sonucunda ise ağaç yapısı daha düzenli ve temiz bir hale gelir.
*git rebase master

*******************************************************
                     *  TAG  *
*******************************************************
HASH kontrolünde de göreceğiniz üzere TAG halen daha eski commit'i gösterirken Branch yeni kommiti göstermektedir.
En son durumda eğer git log derseniz tag'lerin yerinde sabit durduğunu ve aslında o commit durumuna bir etiket görevi gördüğünü göreceksiniz. Branch'ler ise aksine commitler arasında hareket edebilir ve commitlerin akışını yönetirken kullanılır.

*git tag release_1 -a -m "İlk versiyon"
*cat .git/refs/tags/release_1 # buradan hash değerini alıyoruz
*git cat-file -p  HASH_DEGERI

--Annotated ve standart tag karşılaştırması için her iki tag türününde içeriğine bakabilirsiniz.
*git tag nonannotated






