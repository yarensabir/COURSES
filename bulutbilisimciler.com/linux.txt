******************************************************
                      *GİRİŞ*
******************************************************
comut satırı arayüzü -- command line interface -- cli

*whoami: kullanıcı hesabını görüntüleme

*ls: list, dizindeki dosyaları listeleme

*cd: change directory

*pwd: anlık olarak çalışılan dizinin yolunu (path) verir

*touch: dosya oluşturma

*echo: istenilen metnin çıktısını terminalde görüntüleme ya da yönlendirme

*cat: dosya içeriği görüntüleme

*mkdir: make directory, dizin oluşturma

*file: dosyanın türünü öğrenme 

*cp: copy

*mv: move

*rm: remove

*help: parametre veya argüman hakkında bilgi elde etme

*man: manual pages, kullanma klavuzu
name: komutun adı ve açıklaması
synopsis: komutun nasıl kullanılacağı
description: komutun işlevi hakkında detaylı bilgi
examples: komutun kullanımıyla alakalı örnekler
see also: komutla ilgili diğer açıklamalar

*find: bulunmak istenen dosyanın dizini

*grep: aranan kelimenin veya metnin dosyanın içinde olup olmadığına bakılır


******************************************************
                   *PAKET YÖNETİMİ*
******************************************************
centos dağıtımlarında paketler rpm ve yum ile, debian dağıtımlarında paketler dpkg ve apt ile yüklenir

*apt-get update

*apt-get upgrade

*apt-get dist-upgrade: sistemdeki gereksiz paketleri siler

*dpkg -l: sistemdeki paketleri listeler

*dpkg --get-selections: sistemdeki kurulu veya kaldırılmış programları listeleme

*dpkg -s programadi: kurulan program hakkında bilgi verir

*apt-get install

*apt-cache show programadi: yüklenecek program hakkında bilgi verir

*apt-get remove programadi

*apt-get purge programadi: programı tüm dosyalarıyla birlikte kaldırır


******************************************************
                *KULLANICI YÖNETİMİ*
******************************************************
Kullanıcı bilgileri /etc/passwd, kullanıcı şifreleri ise /etc/shadow dosyasında yer alır. 

*chage -l kullaniciAdi: kullanıcı bilgilerini görüntüleme

*adduser kullanici2: sisteme yeni kullanıcı eklenir. kullanıcıya ait home dizini home/kullanici2 dizininde oluşur
*useradd -m <'KullanıcıAdı'>: -m home dizininin otomatik oluşturulmasını sağlar

*sudo: yetki yükseltme

*passwd <'KullanıcıAdı'>: şifre güncelleme

*deluser --remove-all-files kullanici1: kullanıcı hesabını siler
*userdel --remove-all-files kullanici1

*cd /home --> cd home işe yaramıyor


******************************************************
              *DOSYA DİZİN İŞLEMLERİ*
******************************************************
YETKİ DÜZEYLERİ:
*r: read/okuma. dosyanın ya da dizinin içeriğine erişim. sayısal değeri -->4
*w: write/yazma: dosyaların ve dizinlerin içeriğini değiştirme yetkisi. sayısal değeri --> 2
*x: execute/çalıştırma: dosyalarda script/bin vb dosyaları çalıştırılabilir hale getirmek için kullanılır. dizinlerde o dizinden geçiş hakkı vermiş olur. sayısal değeri --> 1

dosyalar/dizinler ve yetkileri ls -l ile görüntülenir

-rwxrwxrwx --> -/rwx/rwx/rwx 
- dosya olduğunu gösterir, dizin olduğunda d harfi bulunur (directory)
1. grup rwx kullanıcının yetkilerini gösterir
2. grup rwx kullanıcı grubunun yetkilerini gösterir
3. grup rwx diğer userların yetkisi

yetki chmod ile ayarlanır:
chmod 000 deneme.txt
1. 0 kullanıcının yetkileri
2. 0 grubun yetkileri
3. 0 diğer kullanıcıların yetkileri

chmod 754 deneme.txt 
7--> 7=r(4)+w(2)+x(1) --> rwx
5--> 5=r(4)+x(1) --> r-x
4--> 4=r(4) --> r--

chmod u=rwx,g=rx,o=r deneme.txt
u = user
g = group
o = others


******************************************************
                   *LİNK OLUŞTURMA*
******************************************************
HARD LINK
Hard link, dosya sistemlerindeki bir dosyayı farklı bir isim altında (başka bir adla) referans almanıza olanak tanıyan bir dosya bağlantı türüdür.Hard link, orijinal dosyayla aynı inode numarasına sahiptir ve dosya sisteminden silinmedikçe silinmez. Bu nedenle, orijinal dosya silinse bile hard link hala kalır.Hard link, yalnızca aynı dosya sistemine bağlantı kurabilirsiniz. Yani, farklı bir dosya sistemi veya disk bölümünde bulunan dosyalara hard link oluşturamazsınız. Hard link, dosyanın orijinalinin herhangi bir değişikliklerini yansıtır. Çünkü, aslında aynı dosya sistemdeki aynı dosya ile aynı inode’a referans alırlar. Bu nedenle, hard linkli dosyada yapılan herhangi bir değişiklik, orijinal dosyada da görünecektir.

*ln [source file] [target file]
ls -li

SEMBOLİK LINK
Soft link veya sembolik link, dosya sistemleri arasında bağlantı oluşturmak için kullanılan küçük bir dosya türüdür. Sembolik linkler, asıl dosyanın yerine geçer ve ona referans verir. Sembolik link, orijinal dosyayla aynı inode numarasına sahip değildir ve ayrı bir inode numarası oluşur. Sembolik linkler, herhangi bir dosya veya klasörü işaret edebilir ve farklı dosya sistemleri veya cihazlar arasında kullanılabilir. Ayrıca sembolik linkler, dosya adı veya yolu değiştiğinde programların hala doğru dosyaya erişmesini sağlar ve asıl dosya silindiğinde sembolik link bozulur. 

*ln -s [source file] [symbolic link file]

LINK UYGULAMALARI  
-Dosya Yedekleme: Bir dosyanın hard link’ini oluşturarak, orijinal dosya değiştirilse bile yedeklenmiş dosyaya erişmeye devam edebilirsiniz. 
-Dosya Paylaşımı: Hard link’ler, birden fazla dosya adı arasında paylaşım sağlayarak disk alanından tasarruf etmenizi sağlar.
-Program Kurulumu: Sık kullanılan programların kısayollarını oluşturmak için soft link’ler kullanılabilir. Bu sayede programın asıl dosyasının konumu değişse bile kısayoldan erişebilirsiniz.
-İzin Yönetimi: Bir dosyanın birden fazla kopyası olsa bile, her biri aynı dosya sistemine ait olduğundan izinler aynı kalır.
-Dosya Sıkıştırma: Sıkıştırılmış dosyalar, dosya boyutunu küçültmek için sık sık kullanılır. Tar, gzip veya bzip2 gibi araçlar, sıkıştırılmış dosyaları oluşturmak için hard link’ler ve sembolik link’lerle birlikte kullanılabilir.
-Dosya Yönetimi: Hard link’ler ve sembolik link’ler, dosyaları düzenlemede farklı bir yaklaşım sunar. Örneğin, bir sembolik link oluşturarak, dosyalarınızın daha iyi organize edilmesini sağlayabilirsiniz. Bu şekilde, aynı dosyayı birden fazla klasörde kullanarak, dosya sistemini daha verimli hale getirebilirsiniz.


******************************************************
                  *SİSTEM YÖNETİMİ*
******************************************************
*apt-get install -y systemctl psmisc

Süreç(process) denilen kavram genel olarak; bir program çalıştığında programın belleğe yüklenme işlemine denir.

Systemd, Linux kerneli için sistem ve servis yöneticiliği görevini gerçekleştiren bir servis yöneticisidir. Amacı sistemdeki servislerin çalışmasını organize etmektir.

*systemctl list-units --type=service: çalışan servislerin görüntülenmesi

*systemctl stop <'ServisAdı'>

*systemctl start <'ServisAdı'>

*systemctl restart <'ServisAdı'>

*systemctl status <'ServisAdı'>: servisle ilgili durum bilgisi

*systemctl disable <'ServisAdı'>: servisi devre dışı bırakma

*systemctl enable <'ServisAdı'>

*systemctl --version

*systemctl is-enabled <'ServisAdı'>: servisin aktif olup olmadığı bilgisi

*systemctl list-dependencies <'ServisAdı'>: servisin bağımlılıkları

************************************************************************************************

*ps aux: sistemdeki tüm süreçlerin görüntülenmesi

*ps -e: sistem süreçlerini görüntüleme

*ps -u <username>: kullanıcıya ait süreçler görüntülenir

*ps aux | grep <'SüreçAdı'>: belirtilen işleme ait süreçler gösterilir

*top: süreçleri üç saniyede bir listeler

*top -d <'Sayı'>: süreçleri belirtilen sayı kadar saniyede bir listeler

*pstree -p: süreçleri bağımlılıkları (dependencies) ve PID (Process ID)'leri ile gösterir

*pgrep <'SüreçAdı'>: belirtilen sürece ait PID (Process ID)'leri görüntüler

*kill <'ProcessID'>

*kill -9 <'ProcessID'>: ilgili proccess zorla sonlandırılır

*killall <'SüreçAdı'>

*killall -9 <'SüreçAdı'>

*xkill: kullanıcı arayüzüne yanıt vermeyen uygulamayı sonlandırmaya zorlar


******************************************************
                      *BASH*
******************************************************

*echo $SHELL: hangi shell programı kullanılıyor (büyük çoğunlukla bash)

*ps: çalışmakta olan shell programı

*cat /etc/shells: sistemde bulunan kabuk programları

#!/bin/bash

bu satır sonraki alt satırların hangi kabuk tarafından yorumlanacağını bildiren standart bir tanımdır ve komutların doğru yorumlanabilmesi için her bash scriptinde olmalıdır
Program çalıştırıldığında sistem tarafından öncelikle ilk satır okunur ve ilk satırda geçen kabuk diline göre program ilgili kabuk dili aracılığı ile çalıştırılır. Şayet ilk satıra hiç bir ifade eklemezseniz program varsayılan olarak mevcut kabuk üzerinden script dosyasını çalıştırmayı dener. Yani aslında mevcut sisteminizde kullanılan kabuk bash ise dosyanıza eklemeseniz de betik dosyanız sistemde varsayılan kabuk bash olduğundan sorunsuz şekilde çalışacaktır. Ancak yine de yazmış olduğunuz betik dosyasının diğer sistemlerde de doğru şekilde çalıştırılabilmesi için bu ifadeyi eklemek son derece önemlidir. Zira çoğu sistem bash kabuğunu varsayılan olarak kullansa da, istisnai durumlarda farklı kabukların kullanıldığı da olabiliyor.

bash dosyalarının uzantısı .sh

*vi bb.sh
içerik:
#! /bin/bash
echo "Bulut Bilişimciler"
*esc + :wq!
*bash bb.sh

bash BetikDosyasıAdı.sh
sh BetikDosyasıAdı.sh
./BetikDosyasıAdı.sh --> chmod ile izinlerin değiştirilmesi lazım
chmod +x bb.sh --> çalıştırma yetkisi verdi

./ --> Komutta kullandığımız ".(nokta)" ifadesi bildiğiniz gibi şu anda bulunduğumuz konumu ifade ediyor. Noktadan sonra kullanmış olduğumuz "/(Slash)" ifadesi ise bulunduğumuz konumdaki betik dosyasına ulaşmamızı sağlıyor. yani:
./bb.sh == /root/bb.sh

bash dili sh dilinin genişletilmiş halidir (c/c++ gibi)
sh daha ilkel
bash ile yazılan hem absh ile hem sh ile çalıştırılabilir

************************************************************************************************************
************************************************************************************************************

değişken atama
*degisken="linux"
*echo $degisken

-değişken tanımlarken eşittir(=) işaretinin sağında ve solunda boşluk olmamasına dikkat etmemiz gerekiyor
-sistemdeki değişkenleri görmek içi echo $ tab tab

*declare: değişkenlerin belli türlerde değer almasını sağlama
eğer değişkenlere özellik eklemek istiyorsak "-" işaretini, şayet var olan özellikleri çıkarmak istiyorsak da "+" işaretini, eklemek ya da çıkarmak istediğimiz özelliğin parametresini de belirterek kullanmamız yeterli olacaktır

-p: print, değişkenin niteliklerini bastır
-i: integer, sayısal değişken tanımala
-r: readonly, sabit değer atama
-a: array
-x: export, değişkeni ihraç ederek alt kabuklara aktarma işlemi

*declare -i değişken="değeri"
*declare -a dizi=(değer1 değer2 değer3)
*echo ${dizi[0]}
-dizideki bütün elemanları bastırmak için:
*echo ${liste[*]}
*echo ${liste[@]}
-dizideki eleman sayısını öğrenmek için:
*echo ${#liste[*]}
-dizi elemanının kaç karakterden oluştuğunu öğrenmek için "#"
*echo ${#liste[2]}    

readonly sabit="sabit değer1" --> declare -r sabit1="sabit değer 1"
ikisi aynı

******************************************************
             *PERFORMANCE MONITORING*
******************************************************

*top
çalışan, aktif gerçek zamanlı tüm işlemleri sıralı bir listede görüntülemek ve düzenli olarak güncellemek için kullanılır. CPU kullanımı, bellek kullanımı, önbellek boyutu, arabellek boyutu, işlem PID(process id)'si, kullanıcı ve komutlar olmak üzere detaylı bir çıktı sağlar. Çalışan işlemlerin yüksek bellek ve işlemci kullanımını gösterdiği için, CPU'nun yüksek olduğu durumlarda işletim sistemini yoran komutu bulmanıza yardımcı olacaktır
*vmstat: virtual memory statics
Bu komutla; sanal belliğinizi, kernel thread'lerini, diskinizi, system süreçlerinizi, I/O bloklarını, kesintileri, CPU aktivitelerini ve daha fazlasını görebilirsiniz. Varsayılan olarak vmstat komutu Linux sistemlerinde mevcut değildir, bu nedenle sysstat paketini kurmanız gerekir.
*lsof: list open files
 tüm açık dosyaların ve işlemlerin bir listesini görüntülemek için kullanılır. Bu açık dosyalar şunları içerir; disk files, network sockets, pipes, devices, ve processes.
Bu komutu kullanmanın ana nedenlerinden biri, bir diskin bağlantısının kesilememesi ve dosyaların kullanıldığı veya açıldığı hatasını göstermesidir. Bu komut ile hangi dosyaların kullanımda olduğunu kolayca belirleyebilirsiniz. 
*tcpdump
bir ağ üzerinden belirli bir arabirimde alınan veya aktarılan TCP/IP paketlerini yakalamak veya filtrelemek için kullanılan en yaygın komut satırı ağ paket çözümleyicisi veya paket algılayıcı programlarından biridir.
ip a diyerek network'leri görebilirsiniz.
*netstat: network statics
gelen ve giden ağ paketleri istatistiklerinin yanı sıra, arayüz istatistiklerini izlemek için yararlı bir komuttur.Ağ performansını izlemek ve sorunları gidermek için sıklıkla kullanılır. Bu komut için bir çok kullanım mevcuttur.

************************************************************************************************************
************************************************************************************************************

Sar – Monitor, collect and report Linux system activity
Sistem Faaliyet Raporu ( SAR ), çeşitli sistem yüklerini raporlamak için kullanılan bir Unix Sistem izleme komutudur. CPU aktivitesi, bellek / çağrı, kesintiler, cihaz yükü, ağ ve takas alanı kullanımını gibi verileri içerir. 

*htop

*iotop
gerçek zamanlı Disk I/O ve işlemleri izlemek için bir hesaplama fonksiyonuna sahiptir.

*iostat
sistem giriş ve çıkış depolama aygıtı istatistiklerini toplayacak ve gösterecek basit bir araçtır. Bu komut genellikle cihazlar, yerel diskler ve NFS gibi uzak diskler dahil olmak üzere depolama cihazı performans sorunlarını izlemek için kullanılır

*IPTraf
 Linux için açık kaynaklı bir konsol tabanlı gerçek zamanlı ağ (IP LAN) izleme aracıdır. TCP bayrak bilgileri, ICMP ayrıntıları, TCP/UDP trafik arızaları, TCP bağlantı paketi ve bayt sayıları dahil olmak üzere ağ üzerinden geçen IP trafiği izleme gibi çeşitli bilgileri toplar.

*psacct/acct
kullanıcıların sistemdeki etkinliğini izlemek için kullanılır. Bu komutlar, sistem yöneticilerinin her bir kullanıcının ne yaptığı, hangi komutları verdiği, ne kadar kaynak kullandıkları, sistemde ne kadar süre aktif oldukları gibi etkinliklerini izlemesi için çok kullanışlıdır.

*mpstat
ilk işlemci 0 olmak üzere, kullanılabilir her işlemci için etkinlikleri görüntüler. işlemci başına ortalama CPU kullanımını görüntülemek için mpstat -P ALL diyebilirsiniz.

*pmap
bir işlemin bellek haritasını rapor eder. Bellek darboğazlarının nedenlerini bulmak için pmap -d PID(process id) şeklinde komutu kullanabilirsiniz.


******************************************************
             *SYSTEM&HARDWARE MONITORING*
******************************************************

*uname
şletim sistemi adı ve sistem donanımı hakkında temel bilgileri görüntüleyen bir komuttur. Genelde işlemci mimarisini, sistem ana bilgisayar adını(hostname) ve sistemde çalışan kernel sürümünü belirlemek için kullanılır

*lscpu
CPU sayısı, çekirdekler, CPU ailesi modeli, CPU önbellekleri, iş parçacıkları vb. gibi CPU mimariniz hakkında bilgi

*lsblk
aygıtlarla ilgili bilgileri raporlamak için kullanılır (Block device; hard disk, flash sürücü vb. depolama aygıtlarıdır.)

*free -m
bellek miktarlarını görüntüler

*df
Mount Edilmiş Disklerimi ve Kullanımları
bir dosya sistemindeki toplam alana ve kullanılabilir alana ilişkin bilgileri görüntüler. Ek parametrelerle istediğiniz çıktıyı görüntüleyebilirsiniz

*ifconfig -a
*ip link show
*netstat -i

/proc dizini bir sözde dosya sistemidir, içerisinde donanım bilgilerini barındırır ve bu dizin, yalnızca sistem çalışırken bellekte bulunur, diskte kalıcı değildir.
cat /proc/cpuinfo  //diyerek lscpu komutuna benzer bir çıktı görebilirsiniz.
cat /proc/meminfo  //diyerek free komutuna benzer bir çıktı görebilirsiniz.

Intel, cihazları anakarta bağlamak için PCI standardını 1992'de geliştirdi. Çevresel Bileşen Ara Bağlantısı anlamına gelir. Burada PCI Aygıtları terimini, bir PCI veri yolu aracılığıyla ana karta doğrudan bağlı olan ses kartları ve ağ kartları gibi aygıtları belirtmek için kullanabiliriz.
*lscpi
*lscpi -v

Evrensel Seri Veri Yolu veya USB, harici aygıtları bir bilgisayara bağlamak için harici bağlantı noktaları şeklinde çok daha kolay erişim sağlayan başka bir standarttır.
*lsusb

******************************************************
             *ZAMANLANMIŞ GÖREVLER*
******************************************************

Cron Job (Zamanlanmış Görev) ileri tarihli tek seferlik ya da tekrarlanır veya duruma göre değişkenlik gösterebilir zaman uyarlı komutlar uygulamak için yaygın bir şekilde kullanılan yöntemlerden biridir.Rutin işlerin zamanı geldiğinde otomatik olarak başlayabilmesi için zamanlanmış görevler tanımlanabilir. Örnek olarak bir bir sistemi her gün yedeklemek gerekiyorsa bu iş zamanlanmış görevler sayesinde otomatize edilebilir.

Bir cron dosyası belirli bir zamanda çalışacak komutları içeren basit bir metin dosyasıdır. Varsayılan crontab dosyasıysa /etc/crontab‘dır ve bir crontab dizininde /etc/cron.*/ konumlandırılmıştır. Sadece sistem yöneticileri crontab dosyasını düzenleyebilir.

*apt install cron
*service cron status: servisin çalışma durumu kontrol edilir
*service cron start: servis çalışır duruma getirilir
*cat /etc/crontab
*crontab -e: crontab dosyasını editleme
*crontab -u root -e: başka bir kullanıcının crontab dosyasını düzenleme
crontab -u username -l: başkasının crontab dosyasını görüntüleme
*crontab -r: mevcut crontab dosyasını kaldırma
*crontab -l: crontab dosyasının oluşturulup oluşturulmadığının kontrolü


***** /bin/sh backup.sh

Bir crontab dosyası tekrarlanacak bir görevin tarihini ve saatini belirlemek için beş alana sahiptir. Her alan bir yıldız işareti tarafından temsil edilir.

Minute (Dakika) — komutun çalışacağı saatin dakikası 0-59 arası
Hour (Saat) — komutun hangi saatte çalışacağı 0-23 arası
Day of the month (Ay günü) — ayın hangi gününde komutun çalışacağı, 1-31 arası
Month (Ay) — komutun hangi ayda çalışacağı, 1-12 arası
Day of the week (Haftanın günü) — komutun haftanın hangi gününde çalışacağı, 0-7 arası Buna ek olarak her crontab dosyasında doğru karakterleri kullanmanız gerekir.
Yıldız işareti (*) — bütün planlama parametlerini tanımlamak için.
Virgül (,) — tek bir komutun iki ya da daha fazla kere çalıştırılmasını sürdürmek için.
Tire (-) — tek bir komutun çalıştırılma sayısını ayarlarken zaman aralığını belirlemek için.
Bölme işareti (/) — belirli bir aralıkta önceden belirlenmiş sıklığı oluşturmak için.
Last (Son) (L) — belirli bir aydaki haftanın son gününü belirlemek içindir. Örneğin, 3L son çarşamba anlamına gelir.
Weekday (Hafta içi) (W) — belirlenen bir zamana en yakın hafta içi gününü belirlemek için. Örneğin, eğer 1W birincinin Cumartesi olduğu anlamına geliyorsa komut Pazartesi gününde çalışacaktır (3.)
Hash (#) — 1-5 arasından bir rakamdan sonra gelir ve haftanın gününü belirler. Örneğin 1#2 ikinci Pazartesi anlamına gelir.
Soru işareti (?) — boşluk bırakmak için.


******************************************************
                        *cURL*
******************************************************
!!!KONU TAMAMLANMADI!!!

client url

HTTP isteklerini cURL ile gerçekleştirebiliriz.

-libcurl bir çok platformda çalışan; bir çok protokolü(FTP, FTPS, HTTP, HTTPS, SCP, SFTP, TFTP, Telnet, LDAP IMAP, POP3, SMTP, vb...) ve yazılımı (C/C++, R, Java, Python, Go, PHP) desteklemektedir.

-cURL, libcurl kütüphanesini kullanarak veri göndermek veya veri almak için kullanılır. HTTPS gibi güvenli protokol kullanarak bir sunucuya istek yapıldığında ilk olarak SSL sertifika doğrulaması yapar. Eğer istek yapılan sunucu self-signed bir sertifikaya sahipse veya geçersiz bir sertifikası varsa cURL hata mesajı dönecek ve bize istediğimiz veriyi getiremeyecektir. Bu durumu atlatmak yani sertifika doğrulamasının atlanması için -k veya -insecure parametreleri kullanılabilir.

*curl --version
curl [OPTIONS] [URL]
*curl google.com

*curl -o burayayaz.html google.com
burayayaz.html adlı dosyanın içerisine google.com adresine cURL ile yapılan GET isteğinin cevabı yazılmış oldu. 

*curl -O https://medium.com/@damlayazici -O https://medium.com/t%C3%BCrk-telekom-bulut-teknolojileri?source=user_profile---------0----------------------------
istek yapılan adresin uzantısında bir dosya oluşturarak, çıktıyı oraya yazar.

parametreler:
-L: yönlendirme ile sayfaya ulaştırır
curl -L google.com
-C: kesilen indirme işleminin devam ettirilmesinde kullanılır
curl -C - -o tamamlandi.txt http://www.gnu.org/software/gettext/manual/gettext.html
-z: belirli bir tarihten sonraki verileri adresten almak için kullanılır
curl -z 30-July-22 https://jsonplaceholder.typicode.com/albums
-k veya -insecure: sertifika doğrulamasını atlatır
-I: http header'a ulaştırır fakat sayfa durum kodunu da verir
-i: yapılan isteğe karşı dönen cevap bilgisi verilir, http header bilgisi döndürülür
-v: HTTP isteği yapılan adres ve hangi porttan isteğin gerçekleştirildiği, kaynak adresin HTTP header bilgileri, cevap dönen kaynak adrese ait HTTP header bilgileri ve isteğe karşılık dönen cevap bilgileri

*curl -X GET "https://fakerestapi.azurewebsites.net/api/v1/Users"
 bu URL adresinin sunduğu veriler alınır

