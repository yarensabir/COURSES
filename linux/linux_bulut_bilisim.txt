******************************************************
                      *GİRİŞ*
******************************************************
comut satırı arayüzü -- command line interface -- cli

*whoami: kullanıcı hesabını görüntüleme

*ls: list, dizindeki dosyaları listeleme

*cd: change directory

*pwd: anlık olarak çalışılan dizinin yolunu (path) verir

*touch: dosya oluşturma

*echo: istenilen metnin çıktısını terminalde görüntüleme ya da yönlendirme

*cat: dosya içeriği görüntüleme

*mkdir: make directory, dizin oluşturma

*file: dosyanın türünü öğrenme 

*cp: copy

*mv: move

*rm: remove

*help: parametre veya argüman hakkında bilgi elde etme

*man: manual pages, kullanma klavuzu
name: komutun adı ve açıklaması
synopsis: komutun nasıl kullanılacağı
description: komutun işlevi hakkında detaylı bilgi
examples: komutun kullanımıyla alakalı örnekler
see also: komutla ilgili diğer açıklamalar

*find: bulunmak istenen dosyanın dizini

*grep: aranan kelimenin veya metnin dosyanın içinde olup olmadığına bakılır


******************************************************
                   *PAKET YÖNETİMİ*
******************************************************
centos dağıtımlarında paketler rpm ve yum ile, debian dağıtımlarında paketler dpkg ve apt ile yüklenir

*apt-get update

*apt-get upgrade

*apt-get dist-upgrade: sistemdeki gereksiz paketleri siler

*dpkg -l: sistemdeki paketleri listeler

*dpkg --get-selections: sistemdeki kurulu veya kaldırılmış programları listeleme

*dpkg -s programadi: kurulan program hakkında bilgi verir

*apt-get install

*apt-cache show programadi: yüklenecek program hakkında bilgi verir

*apt-get remove programadi

*apt-get purge programadi: programı tüm dosyalarıyla birlikte kaldırır


******************************************************
                *KULLANICI YÖNETİMİ*
******************************************************
Kullanıcı bilgileri /etc/passwd, kullanıcı şifreleri ise /etc/shadow dosyasında yer alır. 

*chage -l kullaniciAdi: kullanıcı bilgilerini görüntüleme

*adduser kullanici2: sisteme yeni kullanıcı eklenir. kullanıcıya ait home dizini home/kullanici2 dizininde oluşur
*useradd -m <'KullanıcıAdı'>: -m home dizininin otomatik oluşturulmasını sağlar

*sudo: yetki yükseltme

*passwd <'KullanıcıAdı'>: şifre güncelleme

*deluser --remove-all-files kullanici1: kullanıcı hesabını siler
*userdel --remove-all-files kullanici1

*cd /home --> cd home işe yaramıyor


******************************************************
              *DOSYA DİZİN İŞLEMLERİ*
******************************************************
YETKİ DÜZEYLERİ:
*r: read/okuma. dosyanın ya da dizinin içeriğine erişim. sayısal değeri -->4
*w: write/yazma: dosyaların ve dizinlerin içeriğini değiştirme yetkisi. sayısal değeri --> 2
*x: execute/çalıştırma: dosyalarda script/bin vb dosyaları çalıştırılabilir hale getirmek için kullanılır. dizinlerde o dizinden geçiş hakkı vermiş olur. sayısal değeri --> 1

dosyalar/dizinler ve yetkileri ls -l ile görüntülenir

-rwxrwxrwx --> -/rwx/rwx/rwx 
- dosya olduğunu gösterir, dizin olduğunda d harfi bulunur (directory)
1. grup rwx kullanıcının yetkilerini gösterir
2. grup rwx kullanıcı grubunun yetkilerini gösterir
3. grup rwx diğer userların yetkisi

yetki chmod ile ayarlanır:
chmod 000 deneme.txt
1. 0 kullanıcının yetkileri
2. 0 grubun yetkileri
3. 0 diğer kullanıcıların yetkileri

chmod 754 deneme.txt 
7--> 7=r(4)+w(2)+x(1) --> rwx
5--> 5=r(4)+x(1) --> r-x
4--> 4=r(4) --> r--

chmod u=rwx,g=rx,o=r deneme.txt
u = user
g = group
o = others


******************************************************
                   *LİNK OLUŞTURMA*
******************************************************
HARD LINK
Hard link, dosya sistemlerindeki bir dosyayı farklı bir isim altında (başka bir adla) referans almanıza olanak tanıyan bir dosya bağlantı türüdür.Hard link, orijinal dosyayla aynı inode numarasına sahiptir ve dosya sisteminden silinmedikçe silinmez. Bu nedenle, orijinal dosya silinse bile hard link hala kalır.Hard link, yalnızca aynı dosya sistemine bağlantı kurabilirsiniz. Yani, farklı bir dosya sistemi veya disk bölümünde bulunan dosyalara hard link oluşturamazsınız. Hard link, dosyanın orijinalinin herhangi bir değişikliklerini yansıtır. Çünkü, aslında aynı dosya sistemdeki aynı dosya ile aynı inode’a referans alırlar. Bu nedenle, hard linkli dosyada yapılan herhangi bir değişiklik, orijinal dosyada da görünecektir.

*ln [source file] [target file]
ls -li

SEMBOLİK LINK
Soft link veya sembolik link, dosya sistemleri arasında bağlantı oluşturmak için kullanılan küçük bir dosya türüdür. Sembolik linkler, asıl dosyanın yerine geçer ve ona referans verir. Sembolik link, orijinal dosyayla aynı inode numarasına sahip değildir ve ayrı bir inode numarası oluşur. Sembolik linkler, herhangi bir dosya veya klasörü işaret edebilir ve farklı dosya sistemleri veya cihazlar arasında kullanılabilir. Ayrıca sembolik linkler, dosya adı veya yolu değiştiğinde programların hala doğru dosyaya erişmesini sağlar ve asıl dosya silindiğinde sembolik link bozulur. 

*ln -s [source file] [symbolic link file]

LINK UYGULAMALARI  
-Dosya Yedekleme: Bir dosyanın hard link’ini oluşturarak, orijinal dosya değiştirilse bile yedeklenmiş dosyaya erişmeye devam edebilirsiniz. 
-Dosya Paylaşımı: Hard link’ler, birden fazla dosya adı arasında paylaşım sağlayarak disk alanından tasarruf etmenizi sağlar.
-Program Kurulumu: Sık kullanılan programların kısayollarını oluşturmak için soft link’ler kullanılabilir. Bu sayede programın asıl dosyasının konumu değişse bile kısayoldan erişebilirsiniz.
-İzin Yönetimi: Bir dosyanın birden fazla kopyası olsa bile, her biri aynı dosya sistemine ait olduğundan izinler aynı kalır.
-Dosya Sıkıştırma: Sıkıştırılmış dosyalar, dosya boyutunu küçültmek için sık sık kullanılır. Tar, gzip veya bzip2 gibi araçlar, sıkıştırılmış dosyaları oluşturmak için hard link’ler ve sembolik link’lerle birlikte kullanılabilir.
-Dosya Yönetimi: Hard link’ler ve sembolik link’ler, dosyaları düzenlemede farklı bir yaklaşım sunar. Örneğin, bir sembolik link oluşturarak, dosyalarınızın daha iyi organize edilmesini sağlayabilirsiniz. Bu şekilde, aynı dosyayı birden fazla klasörde kullanarak, dosya sistemini daha verimli hale getirebilirsiniz.


******************************************************
                  *SİSTEM YÖNETİMİ*
******************************************************
*apt-get install -y systemctl psmisc

Süreç(process) denilen kavram genel olarak; bir program çalıştığında programın belleğe yüklenme işlemine denir.

Systemd, Linux kerneli için sistem ve servis yöneticiliği görevini gerçekleştiren bir servis yöneticisidir. Amacı sistemdeki servislerin çalışmasını organize etmektir.

*systemctl list-units --type=service: çalışan servislerin görüntülenmesi

*systemctl stop <'ServisAdı'>

*systemctl start <'ServisAdı'>

*systemctl restart <'ServisAdı'>

*systemctl status <'ServisAdı'>: servisle ilgili durum bilgisi

*systemctl disable <'ServisAdı'>: servisi devre dışı bırakma

*systemctl enable <'ServisAdı'>

*systemctl --version

*systemctl is-enabled <'ServisAdı'>: servisin aktif olup olmadığı bilgisi

*systemctl list-dependencies <'ServisAdı'>: servisin bağımlılıkları

************************************************************************************************

*ps aux: sistemdeki tüm süreçlerin görüntülenmesi

*ps -e: sistem süreçlerini görüntüleme

*ps -u <username>: kullanıcıya ait süreçler görüntülenir

*ps aux | grep <'SüreçAdı'>: belirtilen işleme ait süreçler gösterilir

*top: süreçleri üç saniyede bir listeler

*top -d <'Sayı'>: süreçleri belirtilen sayı kadar saniyede bir listeler

*pstree -p: süreçleri bağımlılıkları (dependencies) ve PID (Process ID)'leri ile gösterir

*pgrep <'SüreçAdı'>: belirtilen sürece ait PID (Process ID)'leri görüntüler

*kill <'ProcessID'>

*kill -9 <'ProcessID'>: ilgili proccess zorla sonlandırılır

*killall <'SüreçAdı'>

*killall -9 <'SüreçAdı'>

*xkill: kullanıcı arayüzüne yanıt vermeyen uygulamayı sonlandırmaya zorlar


******************************************************
                      *BASH*
******************************************************

*echo $SHELL: hangi shell programı kullanılıyor (büyük çoğunlukla bash)

*ps: çalışmakta olan shell programı

*cat /etc/shells: sistemde bulunan kabuk programları

#!/bin/bash

bu satır sonraki alt satırların hangi kabuk tarafından yorumlanacağını bildiren standart bir tanımdır ve komutların doğru yorumlanabilmesi için her bash scriptinde olmalıdır
Program çalıştırıldığında sistem tarafından öncelikle ilk satır okunur ve ilk satırda geçen kabuk diline göre program ilgili kabuk dili aracılığı ile çalıştırılır. Şayet ilk satıra hiç bir ifade eklemezseniz program varsayılan olarak mevcut kabuk üzerinden script dosyasını çalıştırmayı dener. Yani aslında mevcut sisteminizde kullanılan kabuk bash ise dosyanıza eklemeseniz de betik dosyanız sistemde varsayılan kabuk bash olduğundan sorunsuz şekilde çalışacaktır. Ancak yine de yazmış olduğunuz betik dosyasının diğer sistemlerde de doğru şekilde çalıştırılabilmesi için bu ifadeyi eklemek son derece önemlidir. Zira çoğu sistem bash kabuğunu varsayılan olarak kullansa da, istisnai durumlarda farklı kabukların kullanıldığı da olabiliyor.

bash dosyalarının uzantısı .sh

*vi bb.sh
içerik:
#! /bin/bash
echo "Bulut Bilişimciler"
*esc + :wq!
*bash bb.sh

bash BetikDosyasıAdı.sh
sh BetikDosyasıAdı.sh
./BetikDosyasıAdı.sh --> chmod ile izinlerin değiştirilmesi lazım
chmod +x bb.sh --> çalıştırma yetkisi verdi

./ --> Komutta kullandığımız ".(nokta)" ifadesi bildiğiniz gibi şu anda bulunduğumuz konumu ifade ediyor. Noktadan sonra kullanmış olduğumuz "/(Slash)" ifadesi ise bulunduğumuz konumdaki betik dosyasına ulaşmamızı sağlıyor. yani:
./bb.sh == /root/bb.sh

bash dili sh dilinin genişletilmiş halidir (c/c++ gibi)
sh daha ilkel
bash ile yazılan hem absh ile hem sh ile çalıştırılabilir



